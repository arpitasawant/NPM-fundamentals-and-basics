mkdir npm_basics

cd npm_basics

Install lodash module:
npm install lodash

ls

cd node_modules

****How Does NPM install module?****

npm view lodash

-> The command is going to spit a tar file url that is the tarball URL.
This is the tar file only thing npm receives from the developer.
https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz

tar -xvzf lodash-4.17.21.tar.gz

-> Unzip the tar file

****package.json****

npm init

-> npm initization with package.json

rm package.json

-> removing the file

npm init -y

-> -y flag (short for yes) will directly initialize the npm.

cat package.json
->
{
  "name": "npm-basics",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

*****************************
npm install <name-of-package>
->
Example:

npm install lodash

-> install lodash package

npm i lodash

-> shortcut to install lodash package

*****************************
To remove package:

npm remove <name-of-your-package>

npm uninstall <name-of-your-package>

*****************************

Local and global package:

npm root -g
->give you the location where your node modules are installed

npm i -g npm@latest
->It upgrade npm latest version


*****************************

Semantic Versioning: It has some guidelines to version your package and
we have to follow MAJOR.MINOR.PATCH

1. MAJOR version when you make incompatible API changes,
2. MINOR version when you add functionality in a backwards compatible manner, and
3. PATCH version when you make backwards compatible bug fixes.

*****************************

package-lock.json

nano package.json
->We can edit our file using nano

^caret:
It changes major,minor and patch to latest

~tilde:
It keeps major and minor numbers same and update the patch to latest one

*****************************

Dependencies

devDependencies:

npm install webpack --save-dev
-> If we want to install development tool instead of installing it in 
production environment we can use this command which will create devDependencies.

production:

echo $NODE_ENV
NODE_ENV="production" npm install

The dependencies which are used by your application will go in production and 
the devdependencies will contain dev packages which do not really need on production

peerDependencies:

peerDependencies are the packages that are required to be installed in the user's 
environment.Example: react

*****************************

NPM Scripts

prepublish: Run BEFORE the package is packed and published, as well as on local
npm install without any arguments.

Output:
$ npm run prepublish

> npm-basics@1.0.0 prepublish
> echo 100

100

prestart,start,poststart : Run by the npm start command

Output:

npm start

> npm-basics@1.0.0 start
> echo 'This script was called'

'This script was called'

Any custom script can be added by running:

npm run <script-name> 

Output:

 npm run custom_script

> npm-basics@1.0.0 custom_script
> echo 'Hello'

'Hello'

*****************************

NPX - Node package executer

Run tools without installing globally
example: create-react-app

1.To run local packages

$ npx cowsay hello
 _______
< hello >
 -------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||

2.Run global binaries

*****************************

Changing global packages installation location

mkdir globalnodemodules
--
cd globalnodemodules
--
pwd
/c/Users/Coditas/Documents/NPM-Basics/globalnodemodules
--
npm config set prefix /c/Users/Coditas/Documents/NPM-Basics/globalnodemodules
--
ls
--
npm i cowsay --global
--
ls
cowsay*     cowsay.ps1*  cowthink.cmd   node_modules/
cowsay.cmd  cowthink*    cowthink.ps1*




